{"version":3,"sources":["assets/polkadot_logo.png","assets/logo-polkadot-light.svg","components/Info.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MainBottom","styled","div","_templateObject","MyInput","input","_templateObject2","props","width","InfoBox","state","amended","balData","noBalance","balanceCheck","e","value","polkadotAddress","pubKey","index","bal","vestingAmt","logs","vested","claimData","regenerator_default","a","async","_context","prev","next","target","length","abrupt","_this","frozenToken","claims","awrap","getPastEvents","fromBlock","toBlock","filter","amendedTo","sent","returnValues","original","eth","amount","methods","balanceOf","call","saleAmounts","Number","setState","t0","console","log","encodeAddress","pUtil","stop","_this$state","this","claimed","react_default","createElement","name","onChange","concat","React","Component","check","address","bs58","decode","Navbar","App_templateObject","NavButton","button","App_templateObject2","Main","_templateObject3","MainHeadline","h1","_templateObject4","Section","_templateObject5","alignment","centered","height","bg","color","HeaderBox","_templateObject6","Text","h2","_templateObject7","Line","_templateObject8","DotButton","_templateObject9","Column","_templateObject10","paddingHoriz","paddingVert","Row","_templateObject11","InternalLeft","_templateObject12","InternalRight","_templateObject13","InnerSupportLeft","_templateObject14","InnerSupportRight","_templateObject15","SupportButton","_templateObject16","MainRight","_templateObject17","SucceedIcon","FontAwesomeIcon","_templateObject18","Boolean","status","_templateObject19","MySelect","select","_templateObject20","TextareaButton","_templateObject21","DisabledText","_templateObject22","DisabledButton","_templateObject23","App","correctAmendment","defaultAccount","myCrypto","showAmend","web3","componentDidMount","w3","Web3","providers","HttpProvider","initializeContracts","_context2","Contract","FrozenToken","Claims","inputChange","_e$target","notice","decodeAddress","Object","defineProperty","handleSelect","_this2","react_router_dom","src","Polkadot","react_router","path","render","Fragment","defaultValue","disabled","lib","text","index_es","icon","faClipboard","style","position","resize","JSON","stringify","href","App_MyInput","faThumbsUp","faUnlink","Info","alignItems","PolkadotLight","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ebeed9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/polkadot_logo.39963165.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-polkadot-light.413dc199.svg\";","import { encodeAddress, decodeAddress } from '@polkadot/keyring';\nimport * as pUtil from '@polkadot/util';\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst MainBottom = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 96%;\n  background: ;\n  border-radius: 12px;\n  padding: 2%;\n  color: white;\n  height: 100%;\n`;\n\nconst MyInput = styled.input`\n  width: ${props => props.width}px !important;\n  border-color: black;\n  border-radius: 10px;\n  border-width: 2px;\n  padding: 2px;\n  padding-left: 3px;\n  font-size: 13px;\n  margin-bottom: 16px;\n  @media (max-width: 500px) {\n    width: 90% !important;\n  }\n`;\n\nclass InfoBox extends React.Component {\n\n  state = {\n    amended: false,\n    balData: null,\n    noBalance: false,\n  }\n\n\n  balanceCheck = async (e) => {\n    let { value } = e.target;\n    let amended = false;\n    let polkadotAddress, pubKey, index, bal, vestingAmt;\n\n    if (value.length !== 42 && value.length !== 66) {\n      return;\n    }\n\n    if (!this.props.frozenToken || !this.props.claims) {\n      return;\n    }\n\n    if (value.length === 42) {\n      const logs = await this.props.claims.getPastEvents('Amended', {\n        fromBlock: '8167892',\n        toBlock: 'latest',\n        filter: {\n          amendedTo: [value],\n        }\n      });\n\n      if (logs && logs.length && value !== '0x00b46c2526e227482e2EbB8f4C69E4674d262E75') {\n        value = logs[0].returnValues.original;\n        amended = logs[0].returnValues.original;\n      }\n\n      const vested = await this.props.claims.getPastEvents('Vested', {\n        fromBlock: '8167892',\n        toBlock: 'latest',\n        filter: {\n          eth: [value],\n        }\n      });\n\n      if (vested && vested.length) {\n        vestingAmt = vested[0].returnValues.amount;\n      }\n    }\n\n    // Check whether it is a Ethereum or Polkadot address\n    try {\n      if (value.length === 42) {\n        bal = await this.props.frozenToken.methods.balanceOf(value).call();\n      } else {\n        bal = await this.props.claims.methods.saleAmounts(value).call();\n      }\n\n      if (Number(bal) === 0) {\n        this.setState({\n          noBalance: true,\n        });\n        return;\n      };\n\n    } catch (error) {\n      console.log('error occur in checking balance:', error)\n    }\n\n    if (value.length === 42) {\n      const claimData = await this.props.claims.methods.claims(value).call();\n        index = claimData.index;\n        pubKey = claimData.pubKey;\n      if (pubKey !== '0x0000000000000000000000000000000000000000000000000000000000000000') {\n        polkadotAddress = encodeAddress(pUtil.hexToU8a(pubKey), 0);\n      }\n    } else {\n      pubKey = value\n      polkadotAddress = encodeAddress(value, 0);                      \n    }\n\n    // Normalization\n    bal = Number(bal) / 1000;\n    if (vestingAmt) {\n      vestingAmt = Number(vestingAmt) / 1000;\n    }\n    \n    this.setState({\n      amended,\n      balData: {\n        bal,\n        index: index || null,\n        polkadotAddress: polkadotAddress || null,\n        pubKey: pubKey || null,\n        vested: vestingAmt,\n      },\n      noBalance: false,\n    });\n  }\n\n  render() {\n    // Collect the data here.\n    const { amended, balData, noBalance } = this.state;\n    const claimed = balData && balData.pubKey !== '0x0000000000000000000000000000000000000000000000000000000000000000' && balData.bal !== 0;\n\n    return (\n      <MainBottom>\n        <h1>Verify your claim</h1>\n        <h4>Paste an Ethereum or Polkadot public key to check the associated information:</h4>\n        <MyInput\n          width='500'\n          name='balance-check'\n          onChange={this.balanceCheck}\n        />\n        {\n          noBalance &&\n            <p>No associated DOT balance for this Ethereum account or Polkadot public key.</p>\n        }\n\n        {\n          amended &&\n          <p><b>Amended for:</b>{balData ? amended : ''}</p>\n        }\n        <p><b>Polkadot address:</b> {(balData && balData.pubKey) ? (claimed ? balData.polkadotAddress : 'Not claimed') : 'None'}</p>\n        <p><b>Public key:</b> {(balData && balData.pubKey) ? (claimed ? balData.pubKey : 'Not claimed') : 'None'}</p>\n        <p><b>Index:</b> {(balData && balData.index) ? (claimed ? balData.index : 'Not claimed') : 'None'}</p> \n        <p><b>Balance:</b> {balData ? balData.bal : '0'} DOT {balData && balData.vested ? `(${balData.vested} vested)` : ''}</p>\n      </MainBottom>\n    );\n  }\n}\n\nexport default InfoBox;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClipboard, faThumbsUp, faUnlink } from '@fortawesome/free-solid-svg-icons';\nimport { decodeAddress, encodeAddress } from '@polkadot/keyring';\nimport * as pUtil from '@polkadot/util';\nimport bs58 from 'bs58';\nimport React from 'react';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport styled from 'styled-components';\n\nimport Web3 from 'web3';\n\n// Assets\nimport Polkadot from './assets/polkadot_logo.png';\nimport PolkadotLight from './assets/logo-polkadot-light.svg';\n\n// Components\nimport InfoBox from './components/Info';\n\n// Smart Contracts\nimport Claims from './build/contracts/Claims.json';\nimport FrozenToken from './build/contracts/FrozenToken.json';\n\nconst check = (address) => {\n  const decoded = pUtil.bufferToU8a(bs58.decode(address));\n  \n  return decoded[0] === 0;\n}\n\nconst Navbar = styled.div`\n  width: 80vw;\n  height: 60px;\n  background: white;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  color: white;\n  z-index: 100;\n  padding-left: 8%;\n  padding-right: 12%;\n`;\n\nconst NavButton = styled.button`\nborder-radius: 20px;\nbackground: #E6007A;\nwidth: 180px;\nborder: none;\ncolor: white;\npadding: 10px;\npadding-left: 4px;\npadding-right: 4px;\nfont-size: 20px;\nfont-weight: 500;\nalign-self: center;\n:hover {\n  cursor: pointer;\n}\n`;\n\nconst Main = styled.div`\n  width: 100%;\n  padding: 0%;\n  display: flex;\n  flex-direction: column;\n  padding-top: 0;\n  margin-top: 0%;\n  @media (max-width: 750px) {\n    flex-direction: column;\n    padding: 0;\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nconst MainHeadline = styled.h1`\n  color: white;\n  display: flex;\n  height: 100%;\n  align-items: center;\n  font-weight: 100;\n  font-size: 48px;\n`;\n\nconst Section = styled.div`\n  display: flex;\n  flex-direction: ${props => props.alignment == 'row'? 'row': 'column'};\n  align-items: ${props => props.centered? 'center' : 'flex-start'};\n  width: 100%;\n  height: ${props => props.height}px;\n  margin-right: 0%;\n  background: ${props => props.bg};\n  color: ${props => props.color == 'white'? 'white': 'black'};\n  padding: 0%;\n  @media (max-width: 750px) {\n    width: 90%;\n    margin-bottom: 3%;\n  }\n`;\n\nconst HeaderBox = styled.div`\n  width: 45%;\n  background: ;\n  margin-left: 10%;\n  margin-top: 2%;\n  margin-bottom: 10%;\n`;\n\nconst Text = styled.h2`\n  font-weight: 100;\n  font-size: 34px;\n`;\n\nconst Line = styled.div`\n  height: 2px;\n  background: grey;\n  width: 80%;\n  margin-left: 10%;\n  margin:-right: 10%;\n`;\n\nconst DotButton = styled.button`\n  border-radius: 25px;\n  background: #E6007A;\n  width: 300px;\n  border: none;\n  color: white;\n  padding: 10px;\n  padding-left: 40px;\n  padding-right: 40px;\n  font-size: 24px;\n  font-weight: 300;\n  align-self: center;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst Column = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  padding-left: ${props => props.paddingHoriz? props.paddingHoriz: 0}%;\n  padding-right: ${props => props.paddingHoriz? props.paddingHoriz: 0}%;\n  padding-top: ${props => props.paddingVert? props.paddingVert: 0}%;\n  padding-bottom: ${props => props.paddingVert? props.paddingVert: 0}%;\n  flex-direction: column;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  padding-left: ${props => props.paddingHoriz? props.paddingHoriz: 0}%;\n  padding-right: ${props => props.paddingHoriz? props.paddingHoriz: 0}%;\n  padding-top: ${props => props.paddingVert? props.paddingVert: 0}%;\n  padding-bottom: ${props => props.paddingVert? props.paddingVert: 0}%;\n  flex-direction: row;\n`;\n\nconst InternalLeft = styled.div`\n  height: 100%;\n  width: 40%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst InternalRight = styled.div`\n  height: 100%;\n  width: 40%;\n`;\n\nconst InnerSupportLeft = styled.div`\n  width: 50%;\n`;\n\n\nconst InnerSupportRight = styled.div`\n  width: 50%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst SupportButton = styled(DotButton)`\n  background: rgba(255,255,255,0.5);\n  color: black;\n  margin-left: 80px;\n  margin-top: 50px;\n`;\n\nconst MainRight = styled.div`\n  margin: auto;\n  width: 70%;\n`;\n\nconst SucceedIcon = styled(FontAwesomeIcon)`\n  color: ${props => Boolean(props.status) ? 'green' : 'red'};\n`;\n\nconst MyInput = styled.input`\n  width: ${props => props.width}px !important;\n  border-color: black;\n  border-radius: 10px;\n  border-width: 2px;\n  padding: 2px;\n  padding-left: 3px;\n  font-size: 13px;\n  margin-bottom: 16px;\n  @media (max-width: 750px) {\n    width: 90% !important;\n  }\n`;\n\nconst MySelect = styled.select`\n  border-color: black;\n  border-radius: 10px;\n  border-width: 2px;\n  padding: 1px;\n  padding-left: 2px;\n  background: white;\n  width: 80%;\n  margin-top: 10px;\n`;\n\nconst TextareaButton = styled.button`\n  background: black;\n  color: white;\n  border-color: black;\n  :hover {\n    cursor: pointer;\n  }\n  @media (max-width: 750px) {\n    margin-left: 80%;\n  }\n`;\n\nconst DisabledText = styled.div`\n  background: #EBEBE4;\n  font-size: 12px;\n  color: #545454;\n  border-style: solid;\n  border-color: silver;\n  border-width: 0.25px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 100%;\n  height: 25px;\n  overflow-x: hidden;\n  position: relative;\n`;\n\nconst DisabledButton = styled.button`\n  position: absolute;\n  right: 0;\n  :hover {\n    cursor: pointer;\n    background: #fff;\n  }\n`;\n\n\nclass App extends React.Component {\n\n  state = {\n    claims: null,\n    correctAmendment: null,\n    defaultAccount: null,\n    frozenToken: null,\n    myCrypto: false,\n    pubKey: null,\n    showAmend: false,\n    status: null,\n    web3: null,\n  }\n\n  componentDidMount = async () => {\n    const w3 = new Web3(new Web3.providers.HttpProvider(\"https://kovan.infura.io/v3/7121204aac9a45dcb9c2cc825fb85159\"));\n\n    this.setState({\n      web3: w3,\n    });\n  }\n\n  initializeContracts = async (web3) => {\n    const frozenToken = new web3.eth.Contract(FrozenToken, \"0xebfbe0f24e6dfaff47b05a77b9c81ec9890542c3\");\n    const claims = new web3.eth.Contract(Claims, \"0x7aeefaab36a205a9d3c3c511db74d080997fbb63\");\n  \n    this.setState({\n      claims,\n      frozenToken,\n    });\n  }\n\n  inputChange = (e) => {\n    const { name, value } = e.target;\n    if (name === 'valid-check') {\n      let notice, pubKey, status;\n      \n      try {\n        // Check if its a properly encoding Kusama address.\n        if (!check(value)) {\n          try {\n            pubKey = pUtil.u8aToHex(decodeAddress(value));\n            // It's either a Kusama, Substrate or other.\n            // pubKey = 'This is not a Polkadot address.'\n            notice = true;\n            status = true;\n          } catch (e) {\n            pubKey = 'invalid';\n            notice = false;\n            status = false;\n          }\n        } else {\n          try {\n            pubKey = pUtil.u8aToHex(decodeAddress(value, false,  0));\n            notice = false;\n            status = true;\n          } catch (e) {\n            pubKey = 'invalid';\n            notice = false;\n            status = false;\n          }\n        }\n      } catch (e) {\n        pubKey = 'invalid';\n        notice = false;\n        status = false;\n      }\n\n      this.setState({\n        notice,\n        pubKey,\n        status,\n      })\n    }\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleSelect = (e) => {\n    const { value } = e.target;\n    if (value === 'MyCrypto') {\n      this.setState({\n        myCrypto: true,\n      });\n    }\n  }\n\n  render() {\n    if (this.state.web3 !== null && !this.state.claims && !this.state.frozenToken) {\n      this.initializeContracts(this.state.web3);\n    }\n\n    return (\n      <Router>\n        <div>\n          <Navbar>\n            <img src={Polkadot} width='180px' height='90px'/>\n            <NavButton>Start Claims</NavButton>\n          </Navbar>\n          <Route\n            path='/'\n            render={() => (\n              <>\n                <Main>\n                  <Section height={'300'} bg='#DB0072' centered={true}>\n                    <MainHeadline>Welcome to DOT Claims</MainHeadline>\n                  </Section>\n                  <Section height={500} bg='white'>\n                    <HeaderBox>\n                      <Text>This App will walk you through the process of claiming dots. In order to do so, you need to have an allocation of dots.</Text>\n                    </HeaderBox>\n                    {/* <h1>Placeholder</h1> */}\n                    <DotButton>Start</DotButton>\n                  </Section>\n                  <Section height={300} bg='silver'>\n                    <Column paddingHoriz={10} paddingVert={5}>\n                      <h1>Create a wallet</h1>\n                      <Row>\n                        <InternalLeft>\n                          <p>\n                            You will need to generate a Polkadot account to claim DOT.\n                            There are a few ways you can create one.\n                          </p>\n                          <p>\n                            For most users, we recommend using the Polkadot UI since it\n                            will allow you to store your encrypted keystore locally.\n                          </p>\n                        </InternalLeft>\n                        <InternalRight>\n                          <p>\n                            Another option you may consider using is the subkey command\n                            line utility, which will allow you to take extra steps to protect\n                            the security of your key. \n                           </p>\n                           <p> \n                            Additionally, two other options include\n                            the Enzyme browser extension wallet and the Polkawallet\n                            mobile wallet, although these require an extra step to generate\n                            Polkadot addresses.\n                          </p>\n                        </InternalRight>\n                      </Row>\n                    </Column>\n                  </Section>\n                  <Section height={600} bg='white'>\n                    Here goes the instructions\n                  </Section>\n                  <Section height={500} bg='silver'>\n                    <Column paddingHoriz={10} paddingVert={5}>\n                      <h1>DOTs Claim</h1>\n                      <Row>\n                        <InternalLeft>\n                          <p>\n                            If you participated in the DOT sale and have received your DOT\n                            indicator tokens, you can claim the corresponding amount of\n                            KSM.\n                          </p>\n                          <p>\n                            Make sure to use your original Ethereum key during this\n                            process.\n                          </p>\n                        </InternalLeft>\n                        <InternalRight>\n                          <p>\n                            If you don’t have a Polkadot address, you will\n                            need to generate a Polkadot address.\n                          </p>\n                          <p>\n                            Go to Create a Wallet.\n                          </p>\n                        </InternalRight>\n                      </Row>\n                      <Row>\n                        <Column>\n                          <h4>How will you claim?</h4>\n                          <MySelect onChange={this.handleSelect} defaultValue=\"\">\n                            <option value=\"\">Choose your method to claim</option>\n                            <option value=\"MyCrypto\">On Ethereum (before genesis)</option>\n                            <option value=\"On-chain\" disabled>On Polkadot (after genesis)</option>\n                          </MySelect>\n                        </Column>\n                      </Row>\n                    </Column>\n                  </Section>\n                  <Section height={600} bg='white'>\n                    <MainRight>\n                    {this.state.myCrypto && \n                        <div>\n                          <h4>Claims contract:</h4>\n                          <DisabledText>\n                          0x7aeefaab36a205a9d3c3c511db74d080997fbb63\n                            <CopyToClipboard text=\"0x7aeefaab36a205a9d3c3c511db74d080997fbb63\">\n                              <DisabledButton>\n                                <FontAwesomeIcon icon={faClipboard}/>\n                              </DisabledButton>\n                            </CopyToClipboard>\n                          </DisabledText>\n                          <h4>ABI:</h4>\n                          <div style={{ position: 'relative' }}>\n                            <textarea style={{width: '100%', height: '100px', resize: 'none'}} disabled defaultValue={JSON.stringify(Claims)}></textarea>\n                            <CopyToClipboard text={JSON.stringify(Claims)}>\n                              <TextareaButton>click to copy</TextareaButton>\n                            </CopyToClipboard>\n                          </div>\n                          <h4>What is your Polkadot address? (<a href=\"#\" target=\"_blank\">Please check here</a>)</h4>\n                          <div>\n                            <MyInput\n                              width='450'\n                              name='valid-check'\n                              onChange={this.inputChange}\n                            />\n                            {' '}<SucceedIcon icon={Boolean(this.state.status) ? faThumbsUp : faUnlink} status={this.state.status}/>\n                          </div>\n                          {\n                            this.state.notice &&\n                              <p style ={{ color: 'red' }}>This is NOT a Polkadot address. Your Polkadot address will be: {encodeAddress(pUtil.hexToU8a(this.state.pubKey), 0)}</p>\n                          }\n                          <p>Public Key:</p>\n                          <DisabledText>\n                            {this.state.pubKey || ''}\n                            <CopyToClipboard text={this.state.pubKey || ''}>\n                              <DisabledButton>\n                                <FontAwesomeIcon icon={faClipboard}/>\n                              </DisabledButton>\n                            </CopyToClipboard>\n                          </DisabledText>\n                          <br />\n                          <p>You will need to <a href=\"https://github.com/MyCryptoHQ/MyCrypto/releases\" target=\"_blank\">download</a> and use MyCrypto locally to make this transaction.</p>\n                          <a href=\"https://guide.kusama.network/en/latest/start/dot-holders/\" target=\"_blank\">Instructions for DOT holders.</a><br/>\n                        </div>\n                    }\n                    </MainRight>\n                  </Section>\n                  <Section height={'400'} bg='#DB0072'>\n                    <InfoBox claims={this.state.claims || null} frozenToken={this.state.frozenToken || null} />\n                  </Section>\n                  <Section height={400} bg='silver' alignment='row'>\n                    <Column paddingHoriz={10} paddingVert={5}>\n                      <h1>Third Party Claims Processes</h1>\n                      <Row>\n                      <InnerSupportLeft>\n                        <p>\n                          We do not recommend using a third party app or process to claim or acquire your DOT.\n                        </p>\n                        <p>\n                          Claiming using a third-party process can lead to the loss ofyour allocation, therefore we cannot recommend using any\n                          third party apps to do so. Manually specifying your transaction\n                          data, as specified in our claims process, is the only way to be\n                          certain you will receive your allocation.\n                        </p>\n                      </InnerSupportLeft>\n                      <InnerSupportRight>\n                        <p>Need help? Join the Claims Support chat.</p>\n                        <SupportButton>Support Chat</SupportButton>\n                      </InnerSupportRight>\n                      </Row>\n                    </Column>\n                  </Section>\n                  <Section height={'420'} bg='#172026' color='white'>\n                    <Row paddingHoriz={10} paddingVert={2} style={{ width: '80%' }}>\n                      <Column> \n                        <h5>General</h5>\n                        <a href=\"\">About</a>\n                        <a href=\"\">FAQ</a>\n                        <a href=\"\">Contact</a>\n                        <a href=\"\">Build on Polkadot</a>\n                        <a href=\"\">Grants and Bounties</a>\n                        <a href=\"\">Careers</a>\n                      </Column>\n                      <Column>\n                        <h5>Technology</h5>\n                        <a href=\"\">Technology</a>\n                        <a href=\"\">Token</a>\n                        <a href=\"\">Telemetry</a>\n                        <a href=\"\">Substrate</a>\n                        <a href=\"\">Whitepaper</a>\n                      </Column>\n                      <Column>\n                        <h5>Community</h5>\n                        <a href=\"\">Community</a>\n                        <a href=\"\">Documentation</a>\n                        <a href=\"\">Blog</a>\n                        <a href=\"\">GitHub</a>\n                        <a href=\"\">Riot Chat</a>\n                        <a href=\"\">Medium</a>\n                        <a href=\"\">Reddit</a>\n                        <a href=\"\">Telegram</a>\n                      </Column>\n                      <Column>\n                        Icons!\n                      </Column>\n                    </Row>\n                    <Line/>\n                    <Row paddingHoriz={10} paddingVert={2} style={{ alignItems: 'flex-end', }}>\n                      <img width='120' src={PolkadotLight}/>\n                      &nbsp;&nbsp;&nbsp;&nbsp;\n                      © 2020\n                      &nbsp;\n                      <a href=\"\">Polkadot</a>&nbsp;|\n                      &nbsp;\n                      <a href=\"\">Impressum</a>&nbsp;|\n                      &nbsp;\n                      <a href=\"\">Disclaimer</a>&nbsp;|\n                      &nbsp;\n                      <a href=\"\">Privacy</a>&nbsp;|\n                      &nbsp;\n                      <a href=\"\">Testnet Disclaimer</a>&nbsp;|\n                      &nbsp;\n                      <a href=\"\">Memorandum  </a>\n                    </Row>\n                  </Section>\n                </Main>\n              </>\n            )}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}